//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : LockSystemController.h
//  @ Date : 7/19/2015
//  @ Author : 
//
//


#if !defined(_LOCKSYSTEMCONTROLLER_H)
#define _LOCKSYSTEMCONTROLLER_H

#include "Runnable.h"
#include <stdint.h>
class MotorController;
class LockAccelerometerObserver;

// TBD - incorporate reading calibration status from EEPROM
// Shortcut - for now we'll start up in Auto->Locked state - need to add
// calibration code and EEPROM store/read

class LockSystemController : public Runnable {
public:
	enum MainState {Initial, Automatic, Manual, Fault};
	enum InitState {uncalibrated, unlockCalibration, lockCalibration};
	enum AutoState {locked, unlocked, locking, unlocking, stuck};
/* TBD
	enum FaultState {};
	enum ManState {};
*/

	LockSystemController(
			MotorController * mc,
			LockAccelerometerObserver * obs,
			int lockDirection = -1, int lockedPosition = 180,
			int unlockedPosition = 0, uint8_t defaultPower = 200);
	void calibrateLockedPosition();
	void calibrateUnlockedPosition();
	void motorComplete();
	void motorStuck();
	void cmdLock();
	void cmdUnlock();
	void sleep();
	void wakeUp();
	void timeSlice();
	int isLocked();

private:
	int lockDirection;
	int lockedPosition;
	int unlockedPosition;
	MotorController * motorCont;
	LockAccelerometerObserver * laObs;
	uint8_t drivePower;
	MainState mainState;
	InitState initState;
	AutoState autoState;

	void stateInfo();
};

#endif  //_LOCKSYSTEMCONTROLLER_H
