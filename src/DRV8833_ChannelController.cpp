//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : DRV8833_ChannelController.cpp
//  @ Date : 7/14/2015
//  @ Author : 
//
//


#include "DRV8833_ChannelController.h"
#include "Debug.h"

DRV8833_ChannelController::DRV8833_ChannelController(int pinIN_1, int pinIN_2,
		int pinSleep, int pinFault,
		LockAccelerometerObserver *observer, int dirSign,
		unsigned int minPower) :
	MotorController(observer, minPower, dirSign),
	pinIN_1(pinIN_1),  pinIN_2(pinIN_2),  pinSleep(pinSleep),
	pinFault(pinFault)
{
}

void DRV8833_ChannelController::init(LockSystemController * lsc)
{
#ifdef MOTOR_CONTROLLER_DEBUG
	debugPrintln(F("DRV8833::init"));
#endif
	MotorController::init(lsc);
	pinMode( pinIN_2, OUTPUT );
	pinMode( pinIN_1, OUTPUT );
	pinMode( pinSleep, OUTPUT );
	digitalWrite( pinIN_2, LOW );
	digitalWrite( pinIN_1, LOW );
	digitalWrite( pinSleep, HIGH );

}


void DRV8833_ChannelController::applyMotorStopCommands() {
#ifdef MOTOR_CONTROLLER_DEBUG
	debugPrintln(F("DRV8833::Stop"));
#endif
	brakeSlowDecay();
}

void DRV8833_ChannelController::applyMotorCoastCommands() {
#ifdef MOTOR_CONTROLLER_DEBUG
	debugPrintln(F("DRV8833::Coast"));
#endif
	coastFastDecay();
}

void DRV8833_ChannelController::applyMotorDriveCommands() {
#ifdef MOTOR_CONTROLLER_DEBUG
	debugPrintln(F("DRV8833::Drive"));
#endif
	int dir = (direction == CW) ? directionSign : -directionSign;
	//too weak
	if (desiredPower < minPower)
	{
		return;
	}
	//forwardCoast
	if (dir == 1)
	{
		//forwardPWMslowDecay();
		forwardPWMfastDecay();
	}
	//backwardCoast
	else
	{
		//reversePWMslowDecay();
		reversePWMfastDecay();
	}
}

void DRV8833_ChannelController::applyMotorSleepCommands() {
#ifdef MOTOR_CONTROLLER_DEBUG
	debugPrintln(F("DRV8833::Sleep"));
	delay(100);
#endif
	digitalWrite( pinSleep, LOW );
}

void DRV8833_ChannelController::applyMotorWakeUpCommands() {
#ifdef MOTOR_CONTROLLER_DEBUG
	debugPrintln(F("DRV8833::Wakeup"));
#endif
	digitalWrite( pinSleep, HIGH );
	delay(1); // per data sheet worst case wakeup is 1ms
}
void DRV8833_ChannelController::coastFastDecay()
{
	digitalWrite( pinIN_1, LOW );
	digitalWrite( pinIN_2, LOW );
}

void DRV8833_ChannelController::reverse()
{
	digitalWrite( pinIN_1, LOW );
	digitalWrite( pinIN_2, HIGH );
}

void DRV8833_ChannelController::forward()
{
	digitalWrite( pinIN_1, HIGH );
	digitalWrite( pinIN_2, LOW );
}

void DRV8833_ChannelController::brakeSlowDecay()
{
	digitalWrite( pinIN_1, HIGH );
	digitalWrite( pinIN_2, HIGH );
}

void DRV8833_ChannelController::forwardPWMfastDecay()
{
	analogWrite( pinIN_1, desiredPower );
	digitalWrite( pinIN_2, LOW );
}

void DRV8833_ChannelController::forwardPWMslowDecay()
{
	digitalWrite( pinIN_1, HIGH );
	analogWrite( pinIN_2, desiredPower );
}

void DRV8833_ChannelController::reversePWMfastDecay()
{
	digitalWrite( pinIN_1, LOW );
	analogWrite( pinIN_2, desiredPower );
}

void DRV8833_ChannelController::reversePWMslowDecay()
{
	analogWrite( pinIN_1, desiredPower );
	digitalWrite( pinIN_2, HIGH );
}

int DRV8833_ChannelController::checkMotorFault() {
	return (pinFault == LOW);
}
