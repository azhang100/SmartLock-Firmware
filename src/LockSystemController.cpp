//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : LockSystemController.cpp
//  @ Date : 7/19/2015
//  @ Author : 
//
//


#include <Arduino.h>
#include "LockSystemController.h"
#include "LockAccelerometerObserver.h"
#include "MotorController.h"
#include "Debug.h"
//#include "StringConsts.h"

#undef LOCK_SYSTEM_CONTROLLER_DEBUG

LockSystemController::LockSystemController(
		MotorController * mc,
		LockAccelerometerObserver * obs,
		int lockDirection, int lockedPosition,
		int unlockedPosition, uint8_t  defaultPower) :
	motorCont(mc),
	laObs(obs),
	lockDirection(lockDirection), lockedPosition(lockedPosition), unlockedPosition(unlockedPosition),
	drivePower(defaultPower),
	mainState(Automatic), // SHORTCUT!!
	autoState(locked), // SHORTCUT!!
	initState(uncalibrated)
{
}

void LockSystemController::timeSlice()
{
	// TBD - nothing for now
#ifdef LOCK_SYSTEM_CONTROLLER_DEBUG
	static int counter = 0;
	if (++counter % 100 == 1) {
		stateInfo();
	}
#endif
}

void LockSystemController::stateInfo()
{
#ifdef LOCK_SYSTEM_CONTROLLER_DEBUG
	debugPrint(F("LSC:stateInfo")); debugPrint(F(" mainState, initState, autoState "));
	switch (mainState) {
		case Initial: debugPrint(F("Initial ")); break;
		case Automatic: debugPrint(F("Automatic ")); break;
		case Manual: debugPrint(F("Manual ")); break;
		case Fault: debugPrint(F("Fault ")); break;
	}

	switch (initState) {
		case uncalibrated: debugPrint(F("uncalibrated ")); break;
		case unlockCalibration: debugPrint(F("unlockCalibration ")); break;
		case lockCalibration: debugPrint(F("lockCalibration ")); break;
	}

	switch (autoState) {
		case locked: debugPrint(lnF("locked")); break;
		case unlocked: debugPrintln(F("unlocked")); break;
		case locking: debugPrintln(F("locking")); break;
		case unlocking: debugPrintln(F("unlocking")); break;
		case stuck: debugPrintln(F("stuck")); break;
	}
#endif
}

void LockSystemController::calibrateLockedPosition()
{
	lockedPosition = laObs->getLockAngleDeg();
#ifdef LOCK_SYSTEM_CONTROLLER_DEBUG
	debugPrint(F("LSC:calibrateLockedPosition"));
	debugPrintlnInt(lockedPosition);
#endif
}

void LockSystemController::calibrateUnlockedPosition()
{
	unlockedPosition = laObs->getLockAngleDeg();
#ifdef LOCK_SYSTEM_CONTROLLER_DEBUG
	debugPrint(F("LSC:calibrateUnlockedPosition"));
	debugPrintlnInt(unlockedPosition);
#endif
}

void LockSystemController::motorComplete() {
#ifdef LOCK_SYSTEM_CONTROLLER_DEBUG
	debugPrintln(F("LSC:motorComplete"));
#endif
	switch (mainState) {
		case Automatic:
			{
				switch (autoState) {
					case locking:
						{
							autoState = locked;
						}
						break;
					case unlocking:
						{
							autoState = unlocked;
						}
						break;
				}
			}
			break;
	}
}

void LockSystemController::motorStuck() {
#ifdef LOCK_SYSTEM_CONTROLLER_DEBUG
	debugPrintln(F("LSC:motorStuck"));
#endif
	switch (mainState) {
		case Automatic:
			{
				switch (autoState) {
					case locking:
						{
							autoState = stuck;
						}
						break;
					case unlocking:
						{
							autoState = stuck;
						}
						break;
				}
			}
			break;
	}
}

void LockSystemController::cmdLock() {
	MotorController::Direction dir = (lockDirection == 1) ? MotorController::CW : MotorController::CCW;
#ifdef LOCK_SYSTEM_CONTROLLER_DEBUG
	debugPrint(F("LSC:cmdLock dir pwr pos ")); debugPrint(dir == MotorController::CW ? S_CW : S_CCW); debugPrint(SPACE);
	debugPrint(drivePower); debugPrint(SPACE);
	debugPrintln(lockedPosition);
#endif
	motorCont->cmdDriveMotorToPosition(dir, drivePower, lockedPosition);
}

void LockSystemController::cmdUnlock() {
	MotorController::Direction dir = (lockDirection == 1) ? MotorController::CCW : MotorController::CW;
#ifdef LOCK_SYSTEM_CONTROLLER_DEBUG
	debugPrint(F("LSC:cmdUnlock dir pwr pos ")); debugPrint(dir == MotorController::CW ? S_CW : S_CCW); debugPrint(SPACE);
	debugPrintInt(drivePower); debugPrint(SPACE);
	debugPrintln(unlockedPosition);
#endif
	motorCont->cmdDriveMotorToPosition(dir, drivePower, unlockedPosition);
}

void LockSystemController::sleep()
{
#ifdef LOCK_SYSTEM_CONTROLLER_DEBUG
	debugPrintln(F("LSC:sleep"));
#endif
	motorCont->sleep();
}

void LockSystemController::wakeUp()
{
#ifdef LOCK_SYSTEM_CONTROLLER_DEBUG
	debugPrintln(F("LSC:wakeUp"));
#endif
	motorCont->wakeUp();
}

int LockSystemController::isLocked()
{
#ifdef LOCK_SYSTEM_CONTROLLER_DEBUG
	debugPrint(F("LSC:isLocked locked: "));
	debugPrintlnInt(mainState == Automatic && autoState == locked);
#endif
	return (mainState == Automatic && autoState == locked);
}
