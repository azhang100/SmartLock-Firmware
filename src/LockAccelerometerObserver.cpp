//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : LockAccelerometerObserver.cpp
//  @ Date : 7/14/2015
//  @ Author : 
//
//


#include "LockAccelerometerObserver.h"
#include <math.h>

LockAccelerometerObserver::LockAccelerometerObserver(AccelerometerSubject * subject, float alpha) :
	AccelerometerObserver(subject, alpha),
	revs_xz(0), revs_yz(0),
	angle_xz(0), angle_yz(0),
	axes(yz)
{
}

void LockAccelerometerObserver::setDefaultAxes(AxisPairs s)
{
	if (s == dflt)
	{
		return;
	}
	axes = s;
}

void LockAccelerometerObserver::resetRevolutions()
{
	revs_xz = 0;
	revs_yz = 0;
}

int LockAccelerometerObserver::getLockAngleDeg(AxisPairs s) {
	switch (s) {
		case dflt:
			return getLockAngleDeg(axes);
			break;
		case xz:
			return angle_xz + 360*revs_xz + 180;
			break;
		case yz:
			return angle_yz + 360*revs_yz + 180;
			break;
	}
}

void LockAccelerometerObserver::Update()
{
	AccelerometerObserver::Update();
	int lastAngle_xz = angle_xz;
	int lastAngle_yz = angle_yz;

	angle_xz = (180*atan2(filtAccel.x, filtAccel.z)/M_PI);
	angle_yz = (180*atan2(filtAccel.y, filtAccel.z)/M_PI);

	int deltaAngle_xz = angle_xz - lastAngle_xz;
	int deltaAngle_yz = angle_yz - lastAngle_yz;

	if (deltaAngle_xz >= 180)
	{
		revs_xz--;
	}
	else if (deltaAngle_xz <= -180)
	{
		revs_xz++;
	}
	if (deltaAngle_yz >= 180)
	{
		revs_yz--;
	}
	else if (deltaAngle_yz <= -180)
	{
		revs_yz++;
	}
}
/*
void LockAccelerometerObserver::getDoorPosition() {

}

void LockAccelerometerObserver::getLockOmega() {

}

void LockAccelerometerObserver::getLockAlpha() {

}
*/
