//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : MotorController.h
//  @ Date : 7/14/2015
//  @ Author : 
//
//


#if !defined(_MOTORCONTROLLER_H)
#define _MOTORCONTROLLER_H

#include "Debug.h"
#include "Runnable.h"
#include "LockAccelerometerObserver.h"

#ifdef MOTOR_CONTROLLER_DEBUG
#include <Arduino.h>
#endif

class LockSystemController;

class MotorController : public Runnable {
#ifdef MOTOR_CONTROLLER_TEST
	friend class MotorControllerTest;
#endif
	public:
		enum State { initial, driving, blocked, stopped, engaging, coasting };
		enum Direction { CW = 1, CCW = -1 };
		enum DrivingMode { Idle, ToPosition, ForDuration };

		MotorController(LockAccelerometerObserver * observer,
				unsigned int minPower = 80, int dirSign = 1);
		virtual void init(LockSystemController * lsc); //decouple init operations from instantiation

		virtual void timeSlice();
		void cmdStop();
		void cmdCoast();
		void cmdDriveMotorToPosition(Direction direction, int power, int targetPos);
		void cmdDriveMotorForDuration(Direction direction, int power, unsigned long targetMs);
		virtual void sleep();
		virtual void wakeUp();
	protected:
		virtual void applyMotorStopCommands() = 0;
		virtual void applyMotorCoastCommands() = 0;
		virtual void applyMotorDriveCommands() = 0;
		virtual void applyMotorSleepCommands() = 0;
		virtual void applyMotorWakeUpCommands() = 0;
		virtual int checkMotorFault() = 0;
		int targetAngle;
		unsigned long targetTime_ms;
		State state;
		DrivingMode driveMode;
		Direction direction;
		unsigned long driveStartTime_ms;
		int directionSign;
		int desiredPower;
		int maxEngageTime_ms;
		LockAccelerometerObserver * myObserver;
		int lastTimeSliceAngle;
		int minimumProgress;
		unsigned int minPower;

		unsigned long totalFaults;
		unsigned long contiguousFaults;

		int positionThreshhold;
		LockSystemController * myLSC;

	private:
		void newState(State ns);
		void stateInfo();
#ifdef MOTOR_CONTROLLER_DEBUG
		static const PROGMEM char * const SPACE;
#endif
};

#ifdef MOTOR_CONTROLLER_TEST
#include <Arduino.h>
//#include "StringConsts.h"
class MotorControllerTest : public Runnable
{
	public:
		MotorControllerTest(MotorController * mc);
		static const PROGMEM char * const SPACE;
		static const PROGMEM char * const PLEASE;
		static const PROGMEM char * const ENTER;
		static const PROGMEM char * const SCENARIO;
		static const PROGMEM char * const DIRECTION;
		static const PROGMEM char * const POWER;
		static const PROGMEM char * const DUR;
		static const PROGMEM char * const POS;
		static const PROGMEM char * const OR;
		static const PROGMEM char * const CW;
		static const PROGMEM char * const CCW;
		static const PROGMEM char * const FAILURE;
		static const PROGMEM char * const SUCCESS;

		const char * p_selScen[6] = { PLEASE, SPACE, ENTER, SPACE, SCENARIO, NULL };
		const char * p_selDir[12] = { PLEASE, SPACE, ENTER, SPACE, DIRECTION, SPACE, CW, SPACE, OR, SPACE, CCW, NULL };
		const char * p_selPower[6] = { PLEASE, SPACE, ENTER, SPACE, POWER, NULL };
		const char * p_selDur[6] = { PLEASE, SPACE, ENTER, SPACE, DUR, NULL };
		const char * p_selPos[6] = { PLEASE, SPACE, ENTER, SPACE, POS, NULL };

		void timeSlice();
		void input(const char * in);
		void input_DFD(const char * in);
		void input_DTP(const char * in);
		void input_DRV(const char * in);
		void init();
		void p(const char * msg, bool doNL = false);
		void p(const __FlashStringHelper* msg, bool doNL = false);
		void p(int i, bool doNL = false);
		void pp(const char * msgs[], bool doNL = false);
		enum Scenario { idle = 0, DFD = 1, DTP = 2, DRV = 3, END = 4 };
		enum State { initial, waitForDir, waitForPower, waitForDuration, waitForPosition,
			checkDriving, checkComplete,
			success, failure };
	private:
		void timeSlice_DFD();
		void timeSlice_DTP();
		void timeSlice_DRV();
		void newState_DFD(State ns);
		void newState_DTP(State ns);
		void newScen(Scenario s);

		Scenario scen;
		State s_DFD;
		State s_DTP;
		unsigned long scenEntryTime_ms;
		unsigned long stateEntryTime_ms;
		const unsigned int msToPrompt = 10000;
		MotorController * mc;
		MotorController::Direction dir;
		int power;
		uint16_t duration;
		int16_t targetPosition;
		int16_t currentPosition;
		int exitCode;
};
#endif
#endif  //_MOTORCONTROLLER_H
